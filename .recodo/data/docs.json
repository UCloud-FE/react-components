{
    "ZForm": {
        "ZForm": {
            "path": "ZForm/ZForm.md",
            "name": "ZForm",
            "info": "### 说明\n\n-   ZForm 组件 为 rc-form 与 Form 组件的简单封装，包含 ZForm 组件、formDecorator、controllerDecorator 和 formShape\n\n    -   ZForm 接收 rc-form 的 form 然后转换为 context 传到下面的 controller 中，减少重复的代码编写\n    -   formDecorator 等同 rc-form 的 createForm，用于创建表单包裹\n    -   controllerDecorator 约等于 rc-form 的 getFieldDecorator 的简写\n\n-   ZForm 需要传入 rc-form 的 form 实例，ZForm 的包裹组件必须使用 formDecorator 来包裹，如下\n\n    ```js static\n    class DemoForm extends React.Component {\n        render() {\n            const { form } = this.props;\n\n            return <ZForm form={form} />;\n        }\n    }\n    DemoForm.propTypes = {\n        form: formShape\n    };\n    const Demo = formDecorator()(DemoForm);\n    ```\n\n-   formDecorator 支持传入 option\n\n    -   `onFieldsChange(props, changed, all): void` field 变化时触发\n    -   `onValuesChange(props, changed, all): void` value 变化时触发\n\n-   controllerDecorator 用于包裹表单组件来让 form 可以收集到组件中的数据，然后将封装后的组件放置到 ZForm 中，如下\n\n    ```js static\n    class Input extends React.Component {\n        render() {\n            return <input {...this.props} />;\n        }\n    }\n    const ZInput = controllerDecorator({\n        initialValue: ''\n    })(Input);\n\n    <ZForm form={form}>\n        <Item>\n            <ZInput zName=\"input\" />\n        </Item>\n    </ZForm>;\n    ```\n\n-   controllerDecorator 包裹的控件为 controlled 状态，value 和 onChange 被 form 托管，组件内定义的默认值将无法生效，如一些控件依赖默认值（如 Slider、Input）必须要注意默认值的传入\n\n    ```js static\n    class Input extends React.Component {\n        render() {\n            return <input {...this.props} />;\n        }\n    }\n    const ZInput = controllerDecorator({\n        // 不传会导致uncontrolled变换为controlled告警\n        initialValue: ''\n    })(Input);\n\n    <ZForm form={form}>\n        <Item>\n            <ZInput zName=\"input\" />\n        </Item>\n    </ZForm>;\n    ```\n\n-   controllerDecorator 支持传入 option\n\n    -   valuePropName - 组件的值的 prop 名称\n    -   getValueProps - 根据组件的值获取 props\n    -   getValueFromEvent - 如何从 event 中获取值\n    -   initialValue - 初始值\n    -   normalize(value, prev, all): Object - 格式化值\n    -   trigger - 如何获取组件的数据\n    -   validateTrigger - 何时触发校验\n    -   rules - 组件的验证规则\n    -   validateFirst - 校验是否发生错误及停止\n    -   validate - 自定义校验\n    -   validate[n].trigger - 校验何时触发\n    -   validate[n].rules - 校验规则\n    -   hidden - 是否在表单中忽略该组件，不做校验和数据手机\n\n-   validate\n\n    ```js static\n    {\n        validateTrigger: 'onBlur',\n        rules: [{required: true}],\n    }\n    /* 等效于 */\n    {\n        validate: [{\n            trigger: 'onBlur',\n            rules: [{required: true}],\n        }]\n    }\n    ```\n\n-   默认的 getValueFromEvent\n\n    ```js static\n    function defaultGetValueFromEvent(e) {\n        if (!e || !e.target) {\n            return e;\n        }\n        const { target } = e;\n        return target.type === 'checkbox' ? target.checked : target.value;\n    }\n    ```\n\n-   form 实例下有一系列方法来获取、设置、校验值等\n\n    -   getFieldsValue([fieldNames: String[]])\n        获取对应 field 的值，不传为所有\n    -   getFieldValue(fieldName: String)\n        获取单个 field 的值\n    -   getFieldInstance(fieldName: String)\n        获取对应 field 的实例\n    -   setFieldsValue(obj: Object)\n        通过 key-value 对象设置 field 的值\n    -   setFieldsInitialValue(obj: Object)\n        通过 key-value 对象设置 field 的初始值\n    -   setFields(obj: Object)\n        通过 key-value 对象设置 field 的值和 errors\n    -   validateFields([fieldNames: String[]], [options: Object], callback: (errors, values) => void)\n        校验表单\n    -   getFieldsError(names): Object{ [name]: String[] }\n        获取对应 field 的错误信息\n    -   getFieldError(name): String[]\n        获取 field 的错误\n    -   isFieldValidating(name: String): Bool\n        获取 field 是否正在校验\n    -   isFieldsValidating(names: String[]): Bool\n        是否其中存在 field 正在校验\n    -   isFieldTouched(name: String): Bool\n        获取 field 是否被用户做过更改\n    -   isFieldsTouched(names: String[]): Bool\n        是否其中存在 field 被用户做过更改\n    -   resetFields([names: String[]])\n        初始化/重置对应的 field\n\n-   更多使用细节查看下方的演示\n\n-   如果需要查看更多内容请看[rc-form 文档](https://github.com/react-component/form#option-object)\n\n### 注意事项\n\n-   formDecorator 包裹的表单不能为 stateless/functional 组件\n-   controllerDecorator 包裹的表单控件也不能为 stateless/functional 组件\n-   zName 必须为唯一值\n\n### 演示\n\n#### 普通使用\n\n```js {\"codepath\": \"base.jsx\"}\n```\n\n#### 自定义校验规则\n\n```js {\"codepath\": \"rule.jsx\"}\n```\n\n#### 使用 zName 定义表单数据结构\n\n```js {\"codepath\": \"name.jsx\"}\n```\n\n#### 模拟主机创建表单\n\n```js {\"codepath\": \"uhost.jsx\"}\n```\n"
        }
    },
    "Upload": {
        "Upload": {
            "path": "Upload/Upload.md",
            "name": "Upload",
            "info": "### 说明\n\n-   传入其它原生的 props 会自动附加到最外层的 div 上，如 style、className 等\n-   是否受控由一开始是否传入 fileList 决定，如果想要受控但是一开始未传入可能会导致逻辑性的错误。受控情况下需要自行处理所有数据。\n-   选择文件的事件触发顺序为 打开文件选择框 - 选择文件 - 检查文件类型（有错误会中断，触发 onError） - 检查文件大小（有错误会中断，触发 onError） - 调用 onAdd（没有则跳过，返回 false 则中断） - 检查文件数量（有错误会中断，触发 onError） - 更新文件列表并触发 onChange - 有 handleUpload 时开始更新文件 status 为 uploading 并开始上传文件，触发 onChange - 文件上传进度更新时可调用 handleProcess，更新进度，更新后会触发 onChange - 文件上传成功或失败时更新文件 status 并触发 onChange\n-   单选时选中文件将会直接将已有文件替换\n-   单选时在调用 onAdd 之前如已存在选择文件将会先调用 onRemove 检查可否移除已有文件，只有两个都通过时才会触发 onChange\n-   单选时不会触发文件数量错误，\n\n#### fileList 中的文件格式\n\n```js static\nconst fileShape = {\n    // 文件名，用来展示名称\n    name: PropTypes.string.isRequired,\n    // 文件的 uid，唯一标示，用作性能优化和标志位\n    uid: PropTypes.string.isRequired,\n    // 文件的尺寸\n    size: PropTypes.number,\n    // 文件的类型\n    type: PropTypes.string,\n    // 文件的状态\n    status: PropTypes.string,\n    // 文件上传的进度\n    progress: PropTypes.number,\n    // 缩略图的地址\n    thumbnailUrl: PropTypes.string\n    // 文件的地址，默认用作点击新窗口打开\n    url: PropTypes.string\n}\n```\n\n### 演示\n\n#### 演示\n\n```js {\"codepath\": \"upload.jsx\"}\n```\n\n#### 简单使用\n\n```js {\"codepath\": \"base.jsx\"}\n```\n\n#### multiple: true - 支持多选\n\n```js {\"codepath\": \"multiple.jsx\"}\n```\n\n#### multiple: false - 支持单选\n\n```js {\"codepath\": \"single.jsx\"}\n```\n\n#### maxCount - 限制文件数量\n\n```js {\"codepath\": \"maxCount.jsx\"}\n```\n\n#### maxSize - 限制文件大小\n\n```js {\"codepath\": \"maxSize.jsx\"}\n```\n\n#### accept - 限制文件类型\n\n```js {\"codepath\": \"accept.jsx\"}\n```\n\n#### disabled - 禁用\n\n```js {\"codepath\": \"disabled.jsx\"}\n```\n\n#### onAdd - 控制文件添加\n\n```js {\"codepath\": \"onAdd.jsx\"}\n```\n\n#### onRemove - 控制文件删除\n\n```js {\"codepath\": \"onRemove.jsx\"}\n```\n\n#### onPreview - 自定义文件预览\n\n```js {\"codepath\": \"onPreview.jsx\"}\n```\n\n#### selector - 自定义选择控件\n\n```js {\"codepath\": \"selector.jsx\"}\n```\n\n#### listType - 隐藏文件列表\n\n```js {\"codepath\": \"listType.jsx\"}\n```\n\n#### defaultFileList - 默认文件列表\n\n```js {\"codepath\": \"uncontrolled.jsx\"}\n```\n\n#### handleUpload - 上传\n\n```js {\"codepath\": \"handleUpload.jsx\"}\n```\n\n#### fileList - 受控组件\n\n```js {\"codepath\": \"controlled.jsx\"}\n```\n\n#### 案例展示\n\n```js {\"codepath\": \"demo.jsx\"}\n```\n\n#### ui - UI 展示列表\n\n```js {\"codepath\": \"ui.jsx\"}\n```\n\n### 其它\n\n#### 提供读取文件 dataUrl 的工具函数\n\n```js {\"codepath\": \"readFile.jsx\"}\n```\n"
        }
    },
    "Tree": {
        "Tree": {
            "path": "Tree/Tree.md",
            "name": "Tree",
            "info": "### 说明\n\n-   这是 Tree - 树组件\n-   与程序树概念不同，按照目前的交互这里的树父节点、子节点有着本质的区别，选中只包括子节点，父节点只做展示，故数据结构中的称谓也有所差异\n\n### 数据结构\n\n#### Key\n\n```ts {\"static\": true}\n// 值需为 string\ntype Key = string;\n```\n\n#### LoadData\n\n```ts {\"static\": true}\ninterface LoadData {\n    (key: Key): Promise<void>;\n}\n```\n\n#### TreeData\n\n```ts {\"static\": true}\ninterface TreeData {\n    // 唯一键，所有值的字符串不得重复，会用作 key 和选中判定，如果为其它值会转为 string 再应用\n    key: Key;\n    // 选项标题内容\n    title: ReactNode;\n    // 子数据，存在即为父节点，不存在即为叶子结点，与程序树有差异，原因详见说明\n    children?: TreeData[];\n    // 是否禁用，父节点禁用会禁用所有子孙节点\n    disabled?: boolean;\n    // 是否强制为父节点\n    isParent?: boolean;\n}\n```\n\n### 交互逻辑\n\n1. 全选、反选、取消选择 等内置方法不会影响禁用项目的勾选状态\n2. 全选状态的展示与禁用项目无关\n3. 存在禁用选中项时会展示部分选中\n\n### 演示\n\n#### 功能演示\n\n```js {\"codepath\": \"tree.jsx\"}\n```\n\n#### method - 内置方法\n\n注意全选和反选只有多选模式下生效\n\n```js {\"codepath\": \"method.jsx\"}\n```\n\n#### controlled / uncontrolled - 受控 / 非受控\n\n```js {\"codepath\": \"controlled.jsx\"}\n```\n\n#### loadData - 异步加载数据\n\n1. 异步加载数据需要在待加载的父级数据中添加 isParent，来告知组件展示展开按钮，通过 loadData 来加载数据后需要更新 DataSource\n2. 由于 Tree 为 Memo Component，更新时需要更新引用\n3. 异步加载需注意无法使用多选场景，多选时数据未加载无法获取选中数据\n\n```js {\"codepath\": \"loadData.jsx\"}\n```\n\n#### search - 搜索\n\n使用 Promise search.handleSearch，来控制搜索 loading 状态，后触发的搜索搜索结果会覆盖之前的，内部已处理\n\n```js {\"codepath\": \"search.jsx\"}\n```\n\n#### 大数据性能测试\n\n```js {\"codepath\": \"bigData.jsx\"}\n```\n"
        }
    },
    "TransferTable": {
        "TransferTable": {
            "path": "TransferTable/TransferTable.md",
            "name": "TransferTable",
            "info": "### 说明\n\n这是 TransferTable 组件，使用 Table 来渲染 Transfer 的列表，支持 Transfer 的所有 props，可参考 Transfer 组件\n\n### 演示\n\n#### 普通使用\n\n```js {\"codepath\": \"transferTable.jsx\"}\n```\n"
        }
    },
    "TransferMenu": {
        "TransferMenu": {
            "path": "TransferMenu/TransferMenu.md",
            "name": "TransferMenu",
            "info": "### 说明\n\n这是 TransferMenu 组件，使用 Menu 来渲染 Transfer 的列表，支持 Transfer 的所有 props，可参考 Transfer 组件\n\n### 演示\n\n#### 普通使用\n\n```js {\"codepath\": \"transferMenu.jsx\"}\n```\n"
        }
    },
    "Transfer": {
        "Transfer": {
            "path": "Transfer/Transfer.md",
            "name": "Transfer",
            "info": "### 说明\n\n这是 Transfer 穿梭框组件，用于数据间的选择\n\n### 演示\n\n#### 普通使用\n\n```js {\"codepath\": \"transfer.jsx\"}\n```\n\n#### search - 自定义搜索\n\n```js {\"codepath\": \"transfer-search.jsx\"}\n```\n"
        }
    },
    "Tooltip": {
        "Tooltip": {
            "path": "Tooltip/Tooltip.md",
            "name": "Tooltip",
            "info": "### 说明\n\n-   Tooltip 基于 Popover，增加了箭头样式，支持所有 Popover 的 props，其它 props 的定义和注意事项参考 Popover 文档\n-   主要用于包裹一些展示性的提示\n\n### 演示\n\n#### 演示\n\n```js {\"codepath\": \"tooltip.jsx\"}\n```\n\n#### theme - 主题\n\n```js {\"codepath\": \"theme.jsx\"}\n```\n\n#### arrow - 箭头\n\n```js {\"codepath\": \"arrow.jsx\"}\n```\n\n#### placement - 位置\n\n```js {\"codepath\": \"placement.jsx\"}\n```\n\n#### style - 修改提示文案宽度\n\n```js {\"codepath\": \"style.jsx\"}\n```\n"
        }
    },
    "TimePicker": {
        "TimePicker": {
            "path": "TimePicker/TimePicker.md",
            "name": "TimePicker",
            "info": "### 说明\n\n#### 这是 TimePicker 组件\n\n### 数据结构\n\n#### TDate\n\n```ts {\"static\": true}\ntype TDate = number | Date | Moment | Dayjs;\n```\n\n#### Size\n\n```ts {\"static\": true}\ntype Size = 'sm' | 'md' | 'lg';\n```\n\n### 演示\n\n#### 演示\n\n```js {\"codepath\": \"timePicker.jsx\"}\n```\n\n#### format - 自定义支持格式\n\n```js {\"codepath\": \"format.jsx\"}\n```\n\n#### size - 尺寸\n\n```js {\"codepath\": \"size.jsx\"}\n```\n\n#### disabled - 禁用\n\n```js {\"codepath\": \"disabled.jsx\"}\n```\n\n#### nullable - 是否可为空\n\n```js {\"codepath\": \"nullable.jsx\"}\n```\n"
        }
    },
    "ThemeProvider": {
        "ThemeProvider": {
            "path": "ThemeProvider/ThemeProvider.md",
            "name": "ThemeProvider",
            "info": "### 说明\n\n这是主题化组件，正常用于包裹整个程序来替换颜色主题等\n\n### 演示\n\n```js {\"codepath\": \"themeprovider.jsx\"}\n```\n"
        }
    },
    "Textarea": {
        "Textarea": {
            "path": "Textarea/Textarea.md",
            "name": "Textarea",
            "info": "### 说明\n\n-   对原生 textarea 的简单封装，包含了一些样式\n\n### 演示\n\n#### 演示\n\n```js {\"codepath\": \"textarea.jsx\"}\n```\n\n#### disabled - 禁用\n\n```js {\"codepath\": \"disabled.jsx\"}\n```\n"
        }
    },
    "Tag": {
        "Group": {
            "path": "Tag/Group.md",
            "name": "Group",
            "info": "### 说明\n\n*   这是 Tag 的 Group 组件，用于包裹 Tag，并提供紧凑型布局\n\n### 演示\n\n*   功能演示\n\n```js {\"codepath\": \"group.jsx\"}\n```\n\n*   紧凑布局 - compact\n\n```js {\"codepath\": \"group-compact.jsx\"}\n```\n"
        },
        "Icon": {
            "path": "Tag/Icon.md",
            "name": "Icon",
            "info": "### 说明\n\n-   这是只有 Icon 的 Tag 组件，用作纯 Icon 标识\n\n### 演示\n\n#### 功能演示\n\n```js {\"codepath\": \"icon.jsx\"}\n```\n\n#### 样式风格 - styleType\n\n```js {\"codepath\": \"icon-styleType.jsx\"}\n```\n\n#### 自定义 icon - icon\n\n```js {\"codepath\": \"icon-icon.jsx\"}\n```\n\n#### 自定义样式 - customStyle\n\n```js {\"codepath\": \"icon-customStyle.jsx\"}\n```\n"
        },
        "Tag": {
            "path": "Tag/Tag.md",
            "name": "Tag",
            "info": "### 说明\n\n这是 Tag 组件，用作属性标签等标识\n\n### 演示\n\n#### 功能演示\n\n```js {\"codepath\": \"tag.jsx\"}\n```\n\n#### 样式风格 - styleType\n\n```js {\"codepath\": \"tag-styleType.jsx\"}\n```\n\n#### 是否可关闭 - closable\n\n```js {\"codepath\": \"tag-closable.jsx\"}\n```\n\n#### 是否禁用 - disabled\n\n```js {\"codepath\": \"tag-disabled.jsx\"}\n```\n\n#### 自定义 icon - icon\n\n```js {\"codepath\": \"tag-icon.jsx\"}\n```\n\n#### 自定义样式 - customStyle\n\n```js {\"codepath\": \"tag-customStyle.jsx\"}\n```\n"
        }
    },
    "Tabs": {
        "Pane": {
            "path": "Tabs/Pane.md",
            "name": "Pane",
            "info": "### 说明\n\ntabs 的面板，必须传入唯一的 key 才可正常工作\n\n### 演示\n\n#### 演示\n\n```js {\"codepath\": \"pane.jsx\"}\n```\n\n#### disabled - 禁用\n\n```js {\"codepath\": \"pane-disabled.jsx\"}\n```\n\n#### forceRender - 强制直接渲染\n\n```js {\"codepath\": \"pane-forceRender.jsx\"}\n```\n"
        },
        "Tabs": {
            "path": "Tabs/Tabs.md",
            "name": "Tabs",
            "info": "### 说明\n\n-   所有的 pane 必须传入唯一 key\n-   支持键盘切换 tab\n-   tab 数量多时会自动出现滚动按钮\n\n### 演示\n\n#### 演示\n\n```js {\"codepath\": \"tabs.jsx\"}\n```\n\n#### position - 位置\n\n```js {\"codepath\": \"tabs-position.jsx\"}\n```\n\n#### styleType - 样式风格\n\n```js {\"codepath\": \"tabs-styleType.jsx\"}\n```\n\n#### destroyInactiveTabPane - 销毁不活动的 tab\n\n```js {\"codepath\": \"tabs-destroyInactiveTabPane.jsx\"}\n```\n\n#### scroll - 滚动\n\n```js {\"codepath\": \"tabs-scroll.jsx\"}\n```\n\n#### uncontrolled\n\n```js {\"codepath\": \"tabs-uncontrolled.jsx\"}\n```\n\n#### child - 嵌套\n\n```js {\"codepath\": \"tabs-child.jsx\"}\n```\n\n#### 手动测试\n\n```js {\"codepath\": \"tabs-manual-test.jsx\"}\n```\n"
        }
    },
    "Table": {
        "ActionList": {
            "path": "Table/ActionList.md",
            "name": "ActionList",
            "info": "### 说明\n\n-   ActionList 已经抽离为外层组件，请使用 ActionList 替换 Table.ActionList\n\n### 演示\n\n#### 演示\n\n```js {\"codepath\": \"actionList.jsx\"}\n```\n"
        },
        "ColumnConfigButton": {
            "path": "Table/ColumnConfigButton.md",
            "name": "ColumnConfigButton",
            "info": "### 说明\n\n-   这是 ColumnConfigButton 表头配置弹窗按钮\n-   使用 context 和 table 通信，所以需要嵌入到 table 中才起作用（title，footer）\n\n### 演示\n\n#### columnConfigButton\n\n```js {\"codepath\": \"columnConfigButton.jsx\"}\n```\n\n#### modalProps - 弹窗自定义 props 设置\n\n```js {\"codepath\": \"columnConfigButton-modalProps.jsx\"}\n```\n"
        },
        "HoverDisplayArea": {
            "path": "Table/HoverDisplayArea.md",
            "name": "HoverDisplayArea",
            "info": "### 说明\n\n-   用于表单列中 hover 时才展示的元素，为了防止 hover 时宽度变化导致抖动，使用 visibility 来控制隐藏。\n\n### 演示\n\n#### HoverDisplayArea\n\n```js {\"codepath\": \"hoverDisplayArea.jsx\"}\n```\n"
        },
        "ResizableTH": {
            "path": "Table/ResizableTH.md",
            "name": "ResizableTH",
            "info": "### 说明\n\n-   这是 ResizableTH 可拖动调整大小的表头组件\n-   需要手动从 lib 中 import，依赖`react-resizable`请自行安装依赖\n\n### 演示\n\n#### resizableTH\n\n```js {\"codepath\": \"resizableTH.jsx\"}\n```\n"
        },
        "SearchInput": {
            "path": "Table/SearchInput.md",
            "name": "SearchInput",
            "info": "### 说明\n\n-   这是 SearchInput 表格搜索框\n-   使用 context 和 table 通信，所以需要嵌入到 table 中才起作用（title，footer）\n-   自定义搜索配合 Table.handleSearch 使用\n-   支持所有 Input 的 props\n\n### 演示\n\n#### searchInput - 演示\n\n```js {\"codepath\": \"searchInput.jsx\"}\n```\n"
        },
        "Table": {
            "path": "Table/Table.md",
            "name": "Table",
            "info": "### 说明\n\n-   Table 表格组件，通过传入 column 和 dataSource 来快速生成表格，内置搜索、滚动、表格列固定等功能。\n-   为了确保数据的准确性请务必保证每条数据存在有效不重复的 key 或者使用 rowKey 来指定 key 的获取方式，表格中将会依照 key 来进行选择等操作。不传入将会使用数据在每一页中的 index 来作为 key，可能会造成 key 重复而导致错误，甚至造成各种奇怪的错误现象。\n-   rowKey 支持函数，第二个参数为 record 在当前页面的 index，强烈不推荐使用！！！请务必注意。\n\n### 演示\n\n#### 属性调试\n\n```js {\"codepath\": \"table.jsx\"}\n```\n\n#### 基本使用\n\n```js {\"codepath\": \"base.jsx\"}\n```\n\n#### columns - 表格列属性定义\n\n```js {\"codepath\": \"columns.jsx\"}\n```\n\n#### emptyContent - 自定义空表格提示\n\n```js {\"codepath\": \"emptyContent.jsx\"}\n```\n\n#### errorContent - 报错提示内容\n\n```js {\"codepath\": \"errorContent.jsx\"}\n```\n\n#### scroll - 滚动定义\n\n```js {\"codepath\": \"scroll.jsx\"}\n```\n\n#### title - 自定义表格顶部内容\n\n```js {\"codepath\": \"title.jsx\"}\n```\n\n#### footer - 自定义表格底部内容\n\n```js {\"codepath\": \"footer.jsx\"}\n```\n\n#### pagination - 自定义分页设置\n\n```js {\"codepath\": \"pagination.jsx\"}\n```\n\n#### rowKey - 定义 key 的获取\n\n```js {\"codepath\": \"rowKey.jsx\"}\n```\n\n#### contextMenu - 右键菜单\n\n```js {\"codepath\": \"contextMenu.jsx\"}\n```\n\n#### filter - 筛选\n\n```js {\"codepath\": \"filter.jsx\"}\n```\n\n#### order - 排序\n\n```js {\"codepath\": \"order.jsx\"}\n```\n\n#### expandedRowRender - 扩展内容渲染\n\n```js {\"codepath\": \"expandedRowRender.jsx\"}\n```\n\n#### hideExpandIcon - 隐藏扩展列展开按钮\n\n```js {\"codepath\": \"hideExpandIcon.jsx\"}\n```\n\n#### expandedRowKeys - 展开列\n\n```js {\"codepath\": \"expandedRowKeys.jsx\"}\n```\n\n#### defaultExpandAllRows - 默认展开扩展列\n\n`使用时务必注意 rowKey 的使用，使用此属性可能会影响到表格的性能`\n\n```js {\"codepath\": \"defaultExpandAllRows.jsx\"}\n```\n\n#### onRow - 设置行 props\n\n```js {\"codepath\": \"onRow.jsx\"}\n```\n\n#### onHeaderRow - 设置表头 props\n\n```js {\"codepath\": \"onHeaderRow.jsx\"}\n```\n\n#### rowSelection - 列选择配置\n\n```js {\"codepath\": \"rowSelection.jsx\"}\n```\n\n#### fixed - 固定表头、列\n\n```js {\"codepath\": \"fixed.jsx\"}\n```\n\n#### 列分组\n\n```js {\"codepath\": \"groupColumns.jsx\"}\n```\n\n#### 子表格\n\n```js {\"codepath\": \"subTable.jsx\"}\n```\n\n#### onConditionChange - 由于 pagination 的某些设计，onConditionChange 返回值中不包含 pagination 变化，要监听 pagination 请使用 pagination 参数\n\n```js {\"codepath\": \"onConditionChange.jsx\"}\n```\n\n#### doNotHandleCondition - 自行处理筛选等逻辑\n\n```js {\"codepath\": \"doNotHandleCondition.jsx\"}\n```\n\n#### 远程加载数据\n\n```js {\"codepath\": \"loadingDataFromRemote.jsx\"}\n```\n\n#### 后端分页、搜索、筛选、排序\n\n```js {\"codepath\": \"fullRemoteTable.jsx\"}\n```\n\n#### popupContainer - 弹出层容器\n\n```js {\"codepath\": \"popupContainer.jsx\"}\n```\n\n#### 单元格合并\n\n```js {\"codepath\": \"cellMerge.jsx\"}\n```\n\n#### demo - 样例演示\n\n```js {\"codepath\": \"demo.jsx\"}\n```\n"
        }
    },
    "Switch": {
        "Switch": {
            "path": "Switch/Switch.md",
            "name": "Switch",
            "info": "### 说明\n\n-   这是 Switch 组件\n\n### 演示\n\n#### 演示\n\n```js {\"codepath\": \"switch.jsx\"}\n```\n\n#### checked - 是否打开\n\n```js {\"codepath\": \"checked.jsx\"}\n```\n\n#### disabled - 禁用\n\n```js {\"codepath\": \"disabled.jsx\"}\n```\n\n#### size - 尺寸\n\n```js {\"codepath\": \"size.jsx\"}\n```\n\n#### onTextAndOffText - 自定义文本\n\n```js {\"codepath\": \"onTextAndOffText.jsx\"}\n```\n\n#### uncontrolled\n\n```js {\"codepath\": \"uncontrolled.jsx\"}\n```\n\n#### 案例展示\n\n```js {\"codepath\": \"demo.jsx\"}\n```\n"
        }
    },
    "SvgIcon": {
        "SvgIcon": {
            "path": "SvgIcon/SvgIcon.md",
            "name": "SvgIcon",
            "info": "### 说明\n\n-   这是 SvgIcon 组件，主要是组件内部使用的一些图标，目前直接不建议使用\n\n### 演示\n\n#### 演示\n\n```js {\"codepath\": \"svgIcon.jsx\"}\n```\n\n#### type - 图标类型\n\n```js {\"codepath\": \"svgIcon-type.jsx\"}\n```\n\n#### color - 颜色\n\n```js {\"codepath\": \"svgIcon-color.jsx\"}\n```\n\n#### spin - 是否旋转\n\n```js {\"codepath\": \"svgIcon-spin.jsx\"}\n```\n\n#### size - 尺寸\n\n```js {\"codepath\": \"svgIcon-size.jsx\"}\n```\n"
        }
    },
    "Steps": {
        "Steps": {
            "path": "Steps/Steps.md",
            "name": "Steps",
            "info": "### 说明\n\n这是步骤条组件\n\n### 演示\n\n#### 演示\n\n```js {\"codepath\": \"steps.jsx\"}\n```\n\n#### steps - 步骤\n\n```js {\"codepath\": \"steps-steps.jsx\"}\n```\n\n#### status - 状态\n\n```js {\"codepath\": \"steps-status.jsx\"}\n```\n\n#### current - 当前 step\n\n```js {\"codepath\": \"steps-current.jsx\"}\n```\n"
        }
    },
    "Spin": {
        "Spin": {
            "path": "Spin/Spin.md",
            "name": "Spin",
            "info": "### 说明\n\n*   只是一个 div 包裹容器，div 本身有自转的样式。\n*   传入其它原生的 props 会自动附加到最外层的 div 上，如 style、className 等\n\n### 演示\n\n*   普通使用\n\n```js {\"codepath\": \"base.jsx\"}\n```\n"
        }
    },
    "Slider": {
        "Slider": {
            "path": "Slider/Slider.md",
            "name": "Slider",
            "info": "### 说明\n\n-   这是 Slider 组件\n\n### 演示\n\n#### 普通使用\n\n```js {\"codepath\": \"slider.jsx\"}\n```\n\n#### value / defaultValue - 受控 / 非受控\n\n```js {\"codepath\": \"uncontrolled.jsx\"}\n```\n\n#### min / max - 最大值 / 最小值\n\n```js {\"codepath\": \"minmax.jsx\"}\n```\n\n#### marks - 标记\n\n```js {\"codepath\": \"marks.jsx\"}\n```\n\n#### disabled - 禁用\n\n```js {\"codepath\": \"disabled.jsx\"}\n```\n\n#### isSensitive - 实时反馈\n\n```js {\"codepath\": \"isSensitive.jsx\"}\n```\n\n#### step - 步长\n\n```js {\"codepath\": \"step.jsx\"}\n```\n\n#### tipFormatter - 提示语格式化\n\n```js {\"codepath\": \"tipFormatter.jsx\"}\n```\n\n#### numberInput - 自定义 NumberInput\n\n```js {\"codepath\": \"numberInput.jsx\"}\n```\n\n#### numberInputTipFormatter - 提示语格式化\n\n```js {\"codepath\": \"numberInputTipFormatter.jsx\"}\n```\n"
        }
    },
    "Select": {
        "Extra": {
            "path": "Select/Extra.md",
            "name": "Extra",
            "info": "### 说明\n\n*   用作 Select 中附加内容的容器\n\n### 演示\n\n*   普通使用\n\n```js {\"codepath\": \"extra.jsx\"}\n```\n"
        },
        "Group": {
            "path": "Select/Group.md",
            "name": "Group",
            "info": "*   普通使用\n\n```js {\"codepath\": \"group.jsx\"}\n```\n"
        },
        "Select": {
            "path": "Select/Select.md",
            "name": "Select",
            "info": "### 说明\n\n-   这是 Select 组件\n-   默认的弹出层容器为 forwardPopupContainer={triggerNode => triggerNode.parentNode}，默认会查找上层的建议容器\n\n### 演示\n\n#### 演示\n\n```js {\"codepath\": \"select.jsx\"}\n```\n\n#### defaultValue - 默认值 （非受控）\n\n```js {\"codepath\": \"uncontrolled.jsx\"}\n```\n\n#### multiple - 多选\n\n```js {\"codepath\": \"multiple.jsx\"}\n```\n\n#### disabled - 禁用\n\n```js {\"codepath\": \"disabled.jsx\"}\n```\n\n#### extra - 附加内容\n\n```js {\"codepath\": \"select-extra.jsx\"}\n```\n\n#### renderSelector - 自定义渲染选择器\n\n```js {\"codepath\": \"renderSelector.jsx\"}\n```\n\n#### renderContent - 如何渲染选中项的展示\n\n```js {\"codepath\": \"renderContent.jsx\"}\n```\n\n#### renderPopup - 自定义渲染弹出内容\n\n```js {\"codepath\": \"renderPopup.jsx\"}\n```\n\n#### search - 是否展示搜索框\n\n```js {\"codepath\": \"search.jsx\"}\n```\n\n#### size - 尺寸\n\n```js {\"codepath\": \"size.jsx\"}\n```\n\n#### showSelectAll - 尺寸\n\n```js {\"codepath\": \"showSelectAll.jsx\"}\n```\n\n#### popoverProps - 弹出层的 popover props\n\n```js {\"codepath\": \"popoverProps.jsx\"}\n```\n\n#### emptyContent - 空数据提示\n\n```js {\"codepath\": \"emptyContent.jsx\"}\n```\n\n#### customStyle - 可自定义样式\n\n```js {\"codepath\": \"customStyle.jsx\"}\n```\n\n#### 边界测试\n\n```js {\"codepath\": \"manual-test.jsx\"}\n```\n"
        }
    },
    "Row": {},
    "Radio": {
        "Group": {
            "path": "Radio/Group.md",
            "name": "Group",
            "info": "### 说明\n\n这是 Radio.Group - 单选框组组件，用于包裹 Radio 组件并获取数据变化，也可以直接使用 options 来定义选项\n\n### 演示\n\n#### 演示\n\n```js {\"codepath\": \"group.jsx\"}\n```\n\n#### disabled - radio 子组件禁用\n\n```js {\"codepath\": \"group-disabled.jsx\"}\n```\n\n#### size - radio 子组件大小\n\n```js {\"codepath\": \"group-size.jsx\"}\n```\n\n#### styleType - radio 子组件样式类型\n\n```js {\"codepath\": \"group-styleType.jsx\"}\n```\n\n#### options - 快捷 radio 配置选项\n\n```js {\"codepath\": \"group-options.jsx\"}\n```\n\n#### defaultValue - 默认值，非受控\n\n```js {\"codepath\": \"group-uncontrolled.jsx\"}\n```\n"
        },
        "Radio": {
            "path": "Radio/Radio.md",
            "name": "Radio",
            "info": "### 说明\n\nRadio 单选框组件，提供多张单选框样式\n\n### 演示\n\n#### 演示\n\n```js {\"codepath\": \"radio.jsx\"}\n```\n\n#### checked - 选中\n\n```js {\"codepath\": \"radio-checked.jsx\"}\n```\n\n#### disabled - 禁用\n\nRadio styleType 为 button 且 disabled 时，如需展示 Tooltip 等，请参考 Button 的 fakeDisabled。\n\n```js {\"codepath\": \"radio-disabled.jsx\"}\n```\n\n#### size - 大小\n\n```js {\"codepath\": \"radio-size.jsx\"}\n```\n\n#### styleType - 样式类型\n\n```js {\"codepath\": \"radio-styleType.jsx\"}\n```\n\n#### defaultValue - 默认值，非受控\n\n```js {\"codepath\": \"radio-uncontrolled.jsx\"}\n```\n"
        }
    },
    "Progress": {
        "Progress": {
            "path": "Progress/Progress.md",
            "name": "Progress",
            "info": "### 说明\n\n这是 Progress 组件\n\n### 演示\n\n#### 普通使用\n\n```js {\"codepath\": \"base.jsx\"}\n```\n\n#### format - 展示文字的格式化\n\n```js {\"codepath\": \"format.jsx\"}\n```\n\n#### color - 进度条颜色\n\n```js {\"codepath\": \"color.jsx\"}\n```\n\n#### custom - 自定义\n\n```js {\"codepath\": \"custom.jsx\"}\n```\n"
        }
    },
    "Popover": {
        "Popover": {
            "path": "Popover/Popover.md",
            "name": "Popover",
            "info": "### 说明\n\n-   这是 Popover 组件，弹出层功能型组件\n-   使用弹出层时需要注意弹出层的容器，如果弹出层的容器为 overflow 容器且具有定位属性或在其内部或嵌套等情况（以下简称 overflow 容器），弹出内容会自动计算定位避开滚动或隐藏，防止被遮挡，但是某些情况下会导致定位的偏移，所以需要保证容器能够完整的显示弹出层，或者将容器设置到 overflow 容器的外部。\n-   Popover 默认的弹出层容器为 body，可使用 getPopupContainer 来自定弹层的容器，或者使用 forwardPopupContainer 自动避开本组件库内组件的 overflow 容器（如 Card，Table 等）。\n-   Modal、Drawer 较为特殊，会中断 forwardPopupContainer，从而避免找到上层非同 dom 级的容器\n\n### 演示\n\n#### 普通使用\n\n```js {\"codepath\": \"base.jsx\"}\n```\n\n#### animation - 动画\n\n```js {\"codepath\": \"animation.jsx\"}\n```\n\n#### placement - 定位\n\n```js {\"codepath\": \"placement.jsx\"}\n```\n\n#### stretch - 尺寸自适应\n\n```js {\"codepath\": \"stretch.jsx\"}\n```\n\n#### alignPoint - 鼠标位置定位\n\n```js {\"codepath\": \"point.jsx\"}\n```\n\n#### visible - 控制弹出层展示(受控)\n\n```js {\"codepath\": \"control.jsx\"}\n```\n\n#### forwardPopupContainer - 自动定位弹出层容器\n\n```js {\"codepath\": \"forwardPopupContainer.jsx\"}\n```\n"
        }
    },
    "PopConfirm": {
        "PopConfirm": {
            "path": "PopConfirm/PopConfirm.md",
            "name": "PopConfirm",
            "info": "### 说明\n\n-   这是 PopConfirm 组件，用作一些按钮操作的二次确认\n-   PopConfirm 由 Tooltip 封装，支持所有 Tooltip 的 props\n\n### 演示\n\n#### 普通使用\n\n```js {\"codepath\": \"popConfirm.jsx\"}\n```\n\n#### onConfirm - 确认按钮回调\n\n```js {\"codepath\": \"onConfirm.jsx\"}\n```\n\n#### onCancel - 取消按钮回调\n\n```js {\"codepath\": \"onCancel.jsx\"}\n```\n\n#### 演示\n\n```js {\"codepath\": \"demo.jsx\"}\n```\n"
        }
    },
    "Pagination": {
        "Pagination": {
            "path": "Pagination/Pagination.md",
            "name": "Pagination",
            "info": "### 说明\n\n这是 Pagination 组件\n\n### 演示\n\n#### 演示\n\n```js {\"codepath\": \"pagination.jsx\"}\n```\n\n#### size - 尺寸\n\n```js {\"codepath\": \"size.jsx\"}\n```\n\n#### total - 总数量\n\n```js {\"codepath\": \"total.jsx\"}\n```\n\n#### showTotal - 自定义 total 展示\n\n```js {\"codepath\": \"showTotal.jsx\"}\n```\n\n#### pageSize - 每页的数量\n\n```js {\"codepath\": \"pageSize.jsx\"}\n```\n\n#### pageSizeOptions - 页数菜单选项\n\n```js {\"codepath\": \"pageSizeOptions.jsx\"}\n```\n\n#### showLessItems - 只显示少量的按钮\n\n```js {\"codepath\": \"showLessItems.jsx\"}\n```\n\n#### showPrevNextJumpers - 显示更多页面跳转\n\n```js {\"codepath\": \"showPrevNextJumpers.jsx\"}\n```\n\n#### showQuickJumper - 显示快捷跳转\n\n```js {\"codepath\": \"showQuickJumper.jsx\"}\n```\n\n#### showSizeChanger - 显示分页调节菜单\n\n```js {\"codepath\": \"showSizeChanger.jsx\"}\n```\n\n#### showTitle - 显示 title\n\n```js {\"codepath\": \"showTitle.jsx\"}\n```\n\n#### simple - 简洁模式\n\n```js {\"codepath\": \"simple.jsx\"}\n```\n\n#### uncontrolled\n\n```js {\"codepath\": \"uncontrolled.jsx\"}\n```\n"
        }
    },
    "NumberInput": {
        "NumberInput": {
            "path": "NumberInput/NumberInput.md",
            "name": "NumberInput",
            "info": "### 说明\n\n-   这是 NumberInput 数字输入框组件\n\n### 演示\n\n#### 演示\n\n```js {\"codepath\": \"numberInput.jsx\"}\n```\n\n#### disabled - 禁用\n\n```js {\"codepath\": \"disabled.jsx\"}\n```\n\n#### readOnly - 只读\n\n```js {\"codepath\": \"readOnly.jsx\"}\n```\n\n#### max/min - 最大值/最小值\n\n```js {\"codepath\": \"maxAndMin.jsx\"}\n```\n\n#### formatter - 自定义展示格式\n\n```js {\"codepath\": \"formatter.jsx\"}\n```\n\n#### parser - 自定义可接受输入格式\n\n```js {\"codepath\": \"parser.jsx\"}\n```\n\n#### precision - 小数点个数\n\n```js {\"codepath\": \"precision.jsx\"}\n```\n\n#### step - 步长\n\n```js {\"codepath\": \"step.jsx\"}\n```\n\n#### styleType - 样式类型\n\n```js {\"codepath\": \"styleType.jsx\"}\n```\n\n#### size - 尺寸\n\n```js {\"codepath\": \"size.jsx\"}\n```\n\n#### suffix - 后缀\n\n```js {\"codepath\": \"suffix.jsx\"}\n```\n\n#### inputStyle - 自定义输入框样式\n\n```js {\"codepath\": \"inputStyle.jsx\"}\n```\n\n#### upHandler/downHandler - 自定义 +/- 按钮\n\n```js {\"codepath\": \"upHandlerAndDownHandler.jsx\"}\n```\n\n#### computeValidNumber - 自定义合法值的方法\n\n```js {\"codepath\": \"computeValidNumber.jsx\"}\n```\n\n#### onNumberChange - 只监听有效数值修改\n\n```js {\"codepath\": \"onNumberChange.jsx\"}\n```\n\n#### uncontrolled - 受控非受控\n\n```js {\"codepath\": \"uncontrolled.jsx\"}\n```\n\n#### tooltip - 提示文案\n\n```js {\"codepath\": \"tooltip.jsx\"}\n```\n"
        }
    },
    "Notice": {
        "Notice": {
            "path": "Notice/Notice.md",
            "name": "Notice",
            "info": "### 说明\n\n这是 Notice 提示框组件\n\n### 演示\n\n#### 演示\n\n```js {\"codepath\": \"notice.jsx\"}\n```\n\n#### 普通使用\n\n```js {\"codepath\": \"base.jsx\"}\n```\n\n#### 自定义是否可关闭、自定义图标、自定义操作\n\n```js {\"codepath\": \"custom.jsx\"}\n```\n"
        }
    },
    "Modal": {
        "Content": {
            "path": "Modal/Content.md",
            "name": "Content",
            "info": "### 说明\n\n弹窗内容容器组件，为了方便组合，没有将间距、滚动等内置，而是拆分为自组件\n\n### 演示\n\n#### 演示\n\n```js {\"codepath\": \"content.jsx\"}\n```\n"
        },
        "Modal": {
            "path": "Modal/Modal.md",
            "name": "Modal",
            "info": "### 说明\n\n-   弹窗组件，纯受控组件，显示隐藏通过 visible 控制\n-   提供 jsx 使用和命令式调用\n\n### 演示\n\n#### 演示\n\n```js {\"codepath\": \"modal.jsx\"}\n```\n\n#### method - 简单的命令式打开弹窗\n\n```js {\"codepath\": \"method.jsx\"}\n```\n\n#### openModal - 命令式调用打开整个弹窗\n\n```js {\"codepath\": \"openModal.jsx\"}\n```\n\n#### title/footer - 自定义 title/footer 内容\n\n```js {\"codepath\": \"titleAndFooter.jsx\"}\n```\n\n#### size - 预设尺寸\n\n```js {\"codepath\": \"size.jsx\"}\n```\n\n#### closable - 关闭按钮\n\n```js {\"codepath\": \"closable.jsx\"}\n```\n\n#### mask - 是否有遮罩层\n\n```js {\"codepath\": \"mask.jsx\"}\n```\n\n#### maskClosable - 是否可通过点击遮罩层关闭\n\n```js {\"codepath\": \"maskClosable.jsx\"}\n```\n\n#### keyboard - 是否可通过键盘关闭\n\n```js {\"codepath\": \"keyboard.jsx\"}\n```\n\n#### destroyOnClose - 关闭后是否直接销毁\n\n```js {\"codepath\": \"destroyOnClose.jsx\"}\n```\n\n#### notice - 弹窗中的提示\n\n```js {\"codepath\": \"notice.jsx\"}\n```\n\n#### 自定义 className\n\n```js {\"codepath\": \"customClassName.jsx\"}\n```\n\n#### 自定义样式\n\n```js {\"codepath\": \"customStyle.jsx\"}\n```\n\n#### popupContainer - 弹出层容器\n\n```js {\"codepath\": \"popupContainer.jsx\"}\n```\n"
        }
    },
    "Message": {
        "Message": {
            "path": "Message/Message.md",
            "name": "Message",
            "info": "### 说明\n\n-   Message 用来弹出提示框。\n-   普遍会使用 method 调用的方式\n-   有 message, success, warning, error, loading 几种不同的方法。\n\n### 演示\n\n#### method - Message 类的方法\n\n接收四个参数，\n\n-   message：显示的消息内容 ｜ 传入 message 的 props\n-   duration: 显示时长，undefined 为默认时长，null 为不自动关闭\n-   callback: 关闭时的回调\n-   option: 自定义属性，目前仅支持 zIndex\n\n```js {\"codepath\": \"method.jsx\"}\n```\n\n#### Message - 或者当组件使用\n\n```js {\"codepath\": \"message.jsx\"}\n```\n\n#### title - 标题\n\n```js {\"codepath\": \"title.jsx\"}\n```\n\n#### footer - 底栏\n\n```js {\"codepath\": \"footer.jsx\"}\n```\n\n#### custom - 自定义弹出 message 内容\n\n想弹出自定义的 Message 展示框时可使用，接收三个参数，\n\n-   message：显示的消息内容\n-   duration: 显示时长，undefined 为默认时长，null 为不自动关闭，同上\n-   callback: 关闭时的回调\n\n```js {\"codepath\": \"custom.jsx\"}\n```\n\n#### config - 自定义 message 配置\n\n可配置全局 message 的配置，会影响后续所有的 message。务必慎用\n\n-   duration: 显示时长，null 为不自动关闭\n-   top: Message 容器距离顶部的距离\n\n```js {\"codepath\": \"config.jsx\"}\n```\n\n#### demo - 样例展示\n\n```js {\"codepath\": \"demo.jsx\"}\n```\n"
        }
    },
    "Menu": {
        "Item": {
            "path": "Menu/Item.md",
            "name": "Item",
            "info": "### 说明\n\n这是菜单项组件\n\n### 演示\n\n#### disabled - 是否禁用\n\n```js {\"codepath\": \"item-disabled.jsx\"}\n```\n\n#### tooltip - 提示\n\n```js {\"codepath\": \"item-tooltip.jsx\"}\n```\n"
        },
        "Menu": {
            "path": "Menu/Menu.md",
            "name": "Menu",
            "info": "### 说明\n\n这是 Menu 菜单组件\n\n### 演示\n\n#### 演示\n\n```js {\"codepath\": \"menu.jsx\"}\n```\n\n#### multiple - 支持多选\n\n```js {\"codepath\": \"menu-multiple.jsx\"}\n```\n\n#### selectedKeys / defaultSelectedKeys - 选中的菜单项的 key (受控 / 非受控)\n\n```js {\"codepath\": \"menu-controlled.jsx\"}\n```\n\n#### selectable - 是否可选\n\n```js {\"codepath\": \"menu-selectable.jsx\"}\n```\n\n#### collapse - 折叠配置\n\n```js {\"codepath\": \"menu-collapse.jsx\"}\n```\n\n#### showSelectAll - 显示全选\n\n```js {\"codepath\": \"menu-showSelectAll.jsx\"}\n```\n"
        },
        "SubMenu": {
            "path": "Menu/SubMenu.md",
            "name": "SubMenu",
            "info": "### 说明\n\n这是子菜单组组件\n\n### 演示\n\n#### title - 标题\n\n```js {\"codepath\": \"submenu-title.jsx\"}\n```\n\n#### styleType - 样式类型\n\n```js {\"codepath\": \"submenu-styleType.jsx\"}\n```\n"
        }
    },
    "LocaleProvider": {
        "LocaleProvider": {
            "path": "LocaleProvider/LocaleProvider.md",
            "name": "LocaleProvider",
            "info": "### 说明\n\n-   国际化语言组件，用于外围包裹来支持统一控制组件的语言\n-   语言控制分为 3 层，开发者可控制的为 2 层，均为可选，优先级从低到高分别是: `组件默认语言（开发者不可控） -> LocaleProvider.locale -> Component.locale`\n\n### 注意点\n\n-   通过 Modal.method 生成的 Modal 组件的语言控制无法通过 context 简单的传输，所以使用了 runtimeLocale，如果一个页面用到了两个传入不同 locale 的 LocaleProvider，那么 runtimeLocale 可能会错乱，请务必注意\n-   如用到 DatePicker、Calendar 等日期相关组件，LocaleProvider 由于生命周期顺序的问题无法实时变更语言，需要手动设置 moment 的语言。\n\n### 演示\n\n#### 自定义语言\n\n```js {\"codepath\": \"localeprovider.jsx\"}\n```\n\n#### 组件语言\n\n```js {\"codepath\": \"componentlocale.jsx\"}\n```\n\n#### 引入语言文件\n\n代码:\n\n```js static\nimport locale from '@ucloud-fe/react-components/lib/components/LocaleProvider/locale/en_US';\n// 使用到DatePicker等日期相关组件的情况下需要手动设置moment语言\nmoment.locale('en');\nconst Demo = () => (\n    <div>\n        <LocaleProvider locale={locale}>\n            <Pagination total={100} showSizeChanger showQuickJumper={{ goButton: true }} />\n        </LocaleProvider>\n    </div>\n);\n<Demo />;\n```\n\n效果:\n\n```js noeditor\nconst Demo = require('./__demo__/localefile').default;\n\n<Demo />;\n```\n\n#### 全语言列表\n\n```js noeditor\nconst Demo = require('./__demo__/list').default;\n\n<Demo />;\n```\n"
        }
    },
    "Loading": {
        "Loading": {
            "path": "Loading/Loading.md",
            "name": "Loading",
            "info": "### 说明\n\n这是 Loading 组件\n\n### 演示\n\n#### 演示\n\n```js {\"codepath\": \"loading.jsx\"}\n```\n\n#### loading - 是否加载\n\n```js {\"codepath\": \"showLoading.jsx\"}\n```\n\n#### indicator - 自定义指示符\n\n```js {\"codepath\": \"indicator.jsx\"}\n```\n\n#### 包裹 inline-block 元素\n\n```js {\"codepath\": \"inlineBlock.jsx\"}\n```\n"
        }
    },
    "Link": {
        "Button": {
            "path": "Link/Button.md",
            "name": "Button",
            "info": "### 说明\n\n-   这是 Link.Button 子组件，提供 Button 样式的 Link 组件，除了支持 Link 的属性外，还支持 Button 的样式属性\n\n### 演示\n\n-   普通使用\n\n```js {\"codepath\": \"button.jsx\"}\n```\n"
        },
        "Link": {
            "path": "Link/Link.md",
            "name": "Link",
            "info": "### 说明\n\n-   这是 Link 组件，主要是针对 a 标签进行样式封装\n\n### 演示\n\n-   普通使用\n\n```js {\"codepath\": \"base.jsx\"}\n```\n"
        }
    },
    "Input": {
        "Input": {
            "path": "Input/Input.md",
            "name": "Input",
            "info": "### 说明\n\n-   这是 Input 组件，在原生 input 上进行扩展，支持自定义前后缀\n-   需要数字输入框的请使用`Input.Number`，具体文档请参见 NumberInput 组件\n-   需要 Textarea 的请使用`Input.Textarea`，具体文档请参见 Textarea 组件\n\n### 演示\n\n#### 演示\n\n```js {\"codepath\": \"input.jsx\"}\n```\n\n#### size - 尺寸\n\n```js {\"codepath\": \"input-size.jsx\"}\n```\n\n#### prefix - 前缀\n\n```js {\"codepath\": \"input-prefix.jsx\"}\n```\n\n#### suffix - 后缀\n\n```js {\"codepath\": \"input-suffix.jsx\"}\n```\n\n#### disabled - 禁用\n\n```js {\"codepath\": \"input-disabled.jsx\"}\n```\n\n#### clearable - 可清空\n\n```js {\"codepath\": \"input-clearable.jsx\"}\n```\n\n#### status - 状态\n\n```js {\"codepath\": \"input-status.jsx\"}\n```\n\n#### 测试\n\n```js {\"codepath\": \"manual-test.jsx\"}\n```\n"
        },
        "Search": {
            "path": "Input/Search.md",
            "name": "Search",
            "info": "### 说明\n\n-   这是 Search 组件，用于搜索，支持除了 suffix 以外的所有 Input 的 props\n-   在点击搜索按钮或者回车时会触发搜索事件\n\n### 演示\n\n#### 演示\n\n```js {\"codepath\": \"search.jsx\"}\n```\n\n#### size - 尺寸\n\n```js {\"codepath\": \"search-size.jsx\"}\n```\n\n#### disabled - 禁用\n\n```js {\"codepath\": \"search-disabled.jsx\"}\n```\n"
        }
    },
    "Icon": {
        "Icon": {
            "path": "Icon/Icon.md",
            "name": "Icon",
            "info": "### 说明\n\n-   传入其它原生的 props 会自动附加到最外层上，如 style、className 等\n-   所有支持图标地址点这里[UCloud Icon Font](https://console-font.pre.ucloudadmin.com/)\n-   配合 prefix，可使用其它字体图标库\n\n### 演示\n\n#### 演示\n\n```js {\"codepath\": \"icon.jsx\", \"props\": {\"className\": \"editor_transparent\"}}\n```\n\n#### type - icon 类型\n\n```js {\"codepath\": \"type.jsx\"}\n```\n\n#### spin - 是否旋转\n\n```js {\"codepath\": \"spin.jsx\"}\n```\n\n#### customStyle - 自定义样式\n\n```js {\"codepath\": \"customStyle.jsx\"}\n```\n"
        }
    },
    "Grid": {
        "Col": {
            "path": "Grid/Col.md",
            "name": "Col",
            "info": "### 演示\n\n#### 演示\n\n```js {\"codepath\": \"col.jsx\"}\n```\n\n#### span - 占位\n\n```js {\"codepath\": \"col-span.jsx\"}\n```\n\n#### offset - 偏移\n\n```js {\"codepath\": \"col-offset.jsx\"}\n```\n\n#### pull & push - 偏移\n\n```js {\"codepath\": \"col-pullAndPush.jsx\"}\n```\n\n#### order - 排序\n\n```js {\"codepath\": \"col-order.jsx\"}\n```\n"
        },
        "README": {
            "path": "Grid/README.md",
            "name": "README",
            "info": "### 说明\n\n-   Grid 布局 包含 Row 和 Col 两个组件，使用的是 12 栅格，如果需要更细致的珊格，可使用小数\n-   Row 用来建立组，其中放置 Col 来进行布局\n"
        },
        "Row": {
            "path": "Grid/Row.md",
            "name": "Row",
            "info": "### 演示\n\n#### 演示\n\n```js {\"codepath\": \"row.jsx\"}\n```\n\n#### 基本使用\n\n```js {\"codepath\": \"row-base.jsx\"}\n```\n\n#### align - 垂直定位\n\n```js {\"codepath\": \"row-align.jsx\"}\n```\n\n#### justify - 水平定位\n\n```js {\"codepath\": \"row-justify.jsx\"}\n```\n\n#### gutter - 栅格间距\n\n```js {\"codepath\": \"row-gutter.jsx\"}\n```\n"
        }
    },
    "Form": {
        "Form": {
            "path": "Form/Form.md",
            "name": "Form",
            "info": "### 说明\n\n表单 UI 组件，只负责布局和展示，不提供任何逻辑功能，表单校验、数据收集请看 `ZForm` 组件。\n\n#### API 设计说明\n\n完整的表单不止包含视觉规范、布局等，还包含了大量的逻辑处理，为了让开发者可以自由选择表单逻辑处理的方式，将表单拆分为 UI 布局组件 - `Form` 和表单逻辑组件 - `ZForm`，开发者如果对表单用法不喜，可自行选择合适的表单逻辑进行封装而不用担心样式。\n\n### 演示\n\n#### 普通使用\n\n```js {\"codepath\": \"form.jsx\"}\n```\n\n#### itemProps - 统一设置 item 的 props\n\n```js {\"codepath\": \"form-itemProps.jsx\"}\n```\n"
        },
        "Group": {
            "path": "Form/Group.md",
            "name": "Group",
            "info": "### 说明\n\n表单组控件，用于包裹表单项成为表单组\n\n### 演示\n\n#### 布局\n\n```js {\"codepath\": \"group.jsx\"}\n```\n"
        },
        "Item": {
            "path": "Form/Item.md",
            "name": "Item",
            "info": "### 说明\n\n表单项，用于包裹表单控件（`Input`、`Select` 等）\n\n### 演示\n\n#### labelCol, controllerCol - 布局\n\n```js {\"codepath\": \"item-layout.jsx\"}\n```\n\n#### help - 帮助内容\n\n```js {\"codepath\": \"item-help.jsx\"}\n```\n\n#### required - 是否必填/必选\n\n```js {\"codepath\": \"item-required.jsx\"}\n```\n\n#### status - 状态\n\n```js {\"codepath\": \"item-status.jsx\"}\n```\n\n#### tip - 自定义提示/报错文案\n\n```js {\"codepath\": \"item-tip.jsx\"}\n```\n\n#### shareStatus - 状态共享给控件\n\n```js {\"codepath\": \"item-shareStatus.jsx\"}\n```\n\n#### itemProps 的使用与覆盖\n\n```js {\"codepath\": \"item-itemProps.jsx\"}\n```\n"
        },
        "SubArea": {
            "path": "Form/SubArea.md",
            "name": "SubArea",
            "info": "### 说明\n\n表单组控件，用于包裹表单项成为一个小的组\n\n### 演示\n\n#### 布局\n\n```js {\"codepath\": \"subArea.jsx\"}\n```\n"
        }
    },
    "EditableTable": {
        "EditableTable": {
            "path": "EditableTable/EditableTable.md",
            "name": "EditableTable",
            "info": "### 说明\n\n-   这是 EditableTable 组件，主要用于列表项的编辑删除\n-   与表格的区别\n    1. pagination 固定为 null\n    2. emptyContent 固定为 null\n    3. columns 中添加了删除列\n-   其余属性与 Table 保持一致\n\n### 演示\n\n#### 普通使用\n\n```js {\"codepath\": \"editableTable.jsx\"}\n```\n\n#### addition - 添加\n\n```js {\"codepath\": \"addition.jsx\"}\n```\n\n#### rowDeletion - 删除\n\n```js {\"codepath\": \"rowDeletion.jsx\"}\n```\n\n#### 样例演示\n\n```js {\"codepath\": \"demo.jsx\"}\n```\n"
        }
    },
    "EditableList": {
        "EditableList": {
            "path": "EditableList/EditableList.md",
            "name": "EditableList",
            "info": "### 说明\n\n这是 EditableList 可编辑列表组件\n\n### 演示\n\n#### 普通使用\n\n```js {\"codepath\": \"editableList.jsx\"}\n```\n\n#### addition - 添加\n\n```js {\"codepath\": \"addition.jsx\"}\n```\n\n#### itemDeletion - 项删除\n\n```js {\"codepath\": \"itemDeletion.jsx\"}\n```\n\n#### grid - 布局\n\n```js {\"codepath\": \"grid.jsx\"}\n```\n\n#### size - 空间尺寸\n\n```js {\"codepath\": \"size.jsx\"}\n```\n\n#### demo - 案例演示\n\n```js {\"codepath\": \"demo.jsx\"}\n```\n"
        }
    },
    "Drawer": {
        "Drawer": {
            "path": "Drawer/Drawer.md",
            "name": "Drawer",
            "info": "### 说明\n\n这是 Drawer 抽屉组件\n\n### 演示\n\n#### 普通使用\n\n```js {\"codepath\": \"drawer.jsx\"}\n```\n\n#### destroyOnClose - 关闭时是否销毁\n\n```js {\"codepath\": \"destroyOnClose.jsx\"}\n```\n\n#### closeHandler - 自定义关闭控件\n\n```js {\"codepath\": \"closeHandler.jsx\"}\n```\n\n#### getContainer - 弹出层容器\n\n```js {\"codepath\": \"getContainer.jsx\"}\n```\n\n#### placement - 位置\n\n```js {\"codepath\": \"placement.jsx\"}\n```\n\n#### 多层嵌套\n\n```js {\"codepath\": \"multiple.jsx\"}\n```\n\n#### popupContainer - 弹出层容器\n\n```js {\"codepath\": \"popupContainer.jsx\"}\n```\n"
        }
    },
    "DatePicker": {
        "DatePicker": {
            "path": "DatePicker/DatePicker.md",
            "name": "DatePicker",
            "info": "### 说明\n\n-   这是 日期选择 组件\n-   需要自行导入 moment 语言包、设置时区\n\n### 数据结构\n\n#### TDate\n\n```ts {\"static\": true}\ntype TDate = number | Date | Moment | Dayjs;\n```\n\n#### TShortcut\n\n```ts {\"static\": true}\ninterface TShortcut {\n    handle: () => TDate;\n    label: ReactNode;\n}\n```\n\n### 演示\n\n#### 演示\n\n```js {\"codepath\": \"datepicker.jsx\"}\n```\n\n#### size - 尺寸\n\n```js {\"codepath\": \"datepicker-size.jsx\"}\n```\n\n#### rules - 自定义规则\n\n```js {\"codepath\": \"datepicker-rules.jsx\"}\n```\n\n#### nullable - 是否可为空/输入\n\n```js {\"codepath\": \"datepicker-nullable.jsx\"}\n```\n\n#### display - 自定义展示形式\n\n```js {\"codepath\": \"datepicker-display.jsx\"}\n```\n\n#### format - 自定义格式化/输入\n\n```js {\"codepath\": \"datepicker-format.jsx\"}\n```\n\n#### status - 状态\n\n```js {\"codepath\": \"datepicker-status.jsx\"}\n```\n\n#### disabled - 禁用\n\n```js {\"codepath\": \"datepicker-disabled.jsx\"}\n```\n\n#### uncontrolled\n\n```js {\"codepath\": \"datepicker-uncontrolled.jsx\"}\n```\n\n#### popoverProps - 弹出容器定义\n\n```js {\"codepath\": \"datepicker-popoverProps.jsx\"}\n```\n"
        },
        "Month": {
            "path": "DatePicker/Month.md",
            "name": "Month",
            "info": "### 说明\n\n这是 月份选择 组件\n\n### 演示\n\n#### 演示\n\n```js {\"codepath\": \"month.jsx\"}\n```\n\n#### size - 尺寸\n\n```js {\"codepath\": \"month-size.jsx\"}\n```\n\n#### rules - 自定义规则\n\n```js {\"codepath\": \"month-rules.jsx\"}\n```\n\n#### nullable - 是否可为空/输入\n\n```js {\"codepath\": \"month-nullable.jsx\"}\n```\n\n#### display - 自定义展示形式\n\n```js {\"codepath\": \"month-display.jsx\"}\n```\n\n#### format - 自定义格式化/输入\n\n```js {\"codepath\": \"month-format.jsx\"}\n```\n\n#### status - 状态\n\n```js {\"codepath\": \"month-status.jsx\"}\n```\n\n#### disabled - 禁用\n\n```js {\"codepath\": \"month-disabled.jsx\"}\n```\n\n#### uncontrolled\n\n```js {\"codepath\": \"month-uncontrolled.jsx\"}\n```\n\n#### popoverProps - 弹出层容器\n\n```js {\"codepath\": \"month-popoverProps.jsx\"}\n```\n"
        },
        "Range": {
            "path": "DatePicker/Range.md",
            "name": "Range",
            "info": "### 说明\n\n这是时间范围选择组件\n\n### 演示\n\n#### 普通使用\n\n```js {\"codepath\": \"range.jsx\"}\n```\n\n#### type - 类型\n\n```js {\"codepath\": \"range-type.jsx\"}\n```\n\n#### size - 尺寸\n\n```js {\"codepath\": \"range-size.jsx\"}\n```\n\n#### display - 展示格式\n\n```js {\"codepath\": \"range-display.jsx\"}\n```\n\n#### format - 自定义格式化/输入\n\n```js {\"codepath\": \"range-format.jsx\"}\n```\n\n#### rules - 自定义规则\n\n```js {\"codepath\": \"range-rules.jsx\"}\n```\n\n#### status - 状态\n\n```js {\"codepath\": \"range-status.jsx\"}\n```\n\n#### rangeTip - 自定义提示\n\n```js {\"codepath\": \"range-rangeTip.jsx\"}\n```\n\n#### disabled - 禁用\n\n```js {\"codepath\": \"range-disabled.jsx\"}\n```\n\n#### nullable - 是否可为空\n\n```js {\"codepath\": \"range-nullable.jsx\"}\n```\n\n#### options - 自定义快捷选项\n\n```js {\"codepath\": \"range-options.jsx\"}\n```\n\n#### onInitialChange - 初始化回调\n\n```js {\"codepath\": \"range-onInitialChange.jsx\"}\n```\n\n#### uncontrolled\n\n```js {\"codepath\": \"range-uncontrolled.jsx\"}\n```\n\n#### popoverProps - 自定义弹出层\n\n```js {\"codepath\": \"range-popoverProps.jsx\"}\n```\n"
        }
    },
    "ConfigProvider": {
        "ConfigProvider": {
            "path": "ConfigProvider/ConfigProvider.md",
            "name": "ConfigProvider",
            "info": "### 说明\n\n这是 ConfigProvider 组件，用于统一配置应用的配置\n\n### 演示\n\n#### 普通使用\n\n```js {\"codepath\": \"demo.jsx\"}\n```\n\n#### theme - 用作定义主题\n\n```js {\"codepath\": \"theme.jsx\"}\n```\n\n#### locale - 用作定义语言\n\n```js {\"codepath\": \"locale.jsx\"}\n```\n"
        }
    },
    "Compact": {
        "Compact": {
            "path": "Compact/Compact.md",
            "name": "Compact",
            "info": "### 说明\n\n-   用于控件间的连接式布局\n\n### 演示\n\n#### 演示\n\n```js {\"codepath\": \"compact.jsx\"}\n```\n\n#### sharedProps - 属性共享\n\n```js {\"codepath\": \"sharedProps.jsx\"}\n```\n"
        }
    },
    "Combine": {
        "Combine": {
            "path": "Combine/Combine.md",
            "name": "Combine",
            "info": "### 说明\n\n-   这是 Combine 组件，主要用于组合各种表单控件的布局\n-   提供紧凑型布局和间隔型布局，并可方便控件间 props 共享\n-   <del>_Combine 会在包裹的组件上添加 className，让组件 display 变为 inline-block，vertical-align 变为 middle，并在组件间添加间距。所以包裹的组件需要注意 className 的继承。_</del>\n-   **由于类名继承某些情况下比较繁琐，如在外层包裹 Popover、Tooltip 或其他组件等情况下，故现修改为使用容器包裹的方式来进行排版，容器为 inline-block、vertical-align 为 middle。**\n-   关于 sharedProps：**使用 sharedProps 除了影响 size 外还会在包裹的组件上添加 props，如果外层组件包裹了 Popover 等 sharedProps 会被 Popover 拿到，而导致内部拿不到，这种情况可以自己传递或直接把 sharedProps 放到包裹的组件中**\n-   **child 为 null、undefined、false 时不做包裹，空字符串、0 不受影响**\n\n### 演示\n\n#### 演示\n\n```js {\"codepath\": \"combine.jsx\"}\n```\n\n#### sharedProps - props 共享\n\n```js {\"codepath\": \"sharedProps.jsx\"}\n```\n\n#### spacing - 间距\n\n```js {\"codepath\": \"spacing.jsx\"}\n```\n\n#### separator - 分隔符\n\n```js {\"codepath\": \"separator.jsx\"}\n```\n\n#### null - 空值处理\n\n```js {\"codepath\": \"null.jsx\"}\n```\n\n#### demo - 样例展示\n\n```js {\"codepath\": \"demo.jsx\"}\n```\n"
        }
    },
    "Collapse": {
        "Collapse": {
            "path": "Collapse/Collapse.md",
            "name": "Collapse",
            "info": "### 说明\n\n对内容进行分组并控制显示隐藏\n\n### 演示\n\n#### 演示\n\n```js {\"codepath\": \"collapse.jsx\"}\n```\n\n#### multiple - 同时展开多个\n\n```js {\"codepath\": \"collapse-multiple.jsx\"}\n```\n\n#### uncontrolled\n\n```js {\"codepath\": \"collapse-uncontrolled.jsx\"}\n```\n"
        },
        "Panel": {
            "path": "Collapse/Panel.md",
            "name": "Panel",
            "info": "### 说明\n\nCollapse 的子组件\n\n### 演示\n\n#### 普通使用\n\n```js {\"codepath\": \"panel.jsx\"}\n```\n\n#### disabled - 禁用\n\n```js {\"codepath\": \"panel-disabled.jsx\"}\n```\n\n#### forceRender - 强制渲染\n\n```js {\"codepath\": \"panel-forceRender.jsx\"}\n```\n\n#### custom title - 自定义 title\n\n```js {\"codepath\": \"panel-customTitle.jsx\"}\n```\n\n#### uncontrolled\n\n```js {\"codepath\": \"panel-uncontrolled.jsx\"}\n```\n\n#### titlePosition - 标题位置\n\n```js {\"codepath\": \"panel-titlePosition.jsx\"}\n```\n"
        }
    },
    "Col": {},
    "Checkbox": {
        "Checkbox": {
            "path": "Checkbox/Checkbox.md",
            "name": "Checkbox",
            "info": "### 说明\n\n-   这是 checkbox 勾选框组件\n\n### 演示\n\n#### 演示\n\n```js {\"codepath\": \"checkbox.jsx\"}\n```\n\n#### checked - 是否勾选\n\n```js {\"codepath\": \"checkbox-checked.jsx\"}\n```\n\n#### disabled - 禁用\n\n```js {\"codepath\": \"checkbox-disabled.jsx\"}\n```\n\n#### size - 尺寸\n\n```js {\"codepath\": \"checkbox-size.jsx\"}\n```\n\n#### styleType - 样式风格\n\n```js {\"codepath\": \"checkbox-styleType.jsx\"}\n```\n\n#### uncontrolled\n\n```js {\"codepath\": \"checkbox-uncontrolled.jsx\"}\n```\n"
        },
        "Group": {
            "path": "Checkbox/Group.md",
            "name": "Group",
            "info": "### 说明\n\n-   这是 Checkbox Group 组件，用于包裹 Checkbox 组件并获取数据\n-   也可以直接使用 options 来定义选项\n-   使用 group 时请使用 value 或 defaultValue 来控制 checkbox 的勾选，不要使用 checked 或 defaultChecked\n-   初始值请注意保证准确性防止出现意外的情况\n\n### 演示\n\n#### 演示\n\n```js {\"codepath\": \"group.jsx\"}\n```\n\n#### size - 尺寸\n\n```js {\"codepath\": \"group-size.jsx\"}\n```\n\n#### styleType - 样式风格\n\n```js {\"codepath\": \"group-styleType.jsx\"}\n```\n\n#### disabled - 禁用\n\n```js {\"codepath\": \"group-disabled.jsx\"}\n```\n\n#### options - 快捷选项\n\n```js {\"codepath\": \"group-options.jsx\"}\n```\n\n#### uncontrolled\n\n```js {\"codepath\": \"group-uncontrolled.jsx\"}\n```\n"
        }
    },
    "Card": {
        "Card": {
            "path": "Card/Card.md",
            "name": "Card",
            "info": "### 说明\n\n-   该组件主要用于卡片式布局，包含 Header、Action、Footer、Content 四个子组件。\n-   由于 Card 外层具有 overflow，内部的弹层会被遮挡错位，现通过 Context 来解决，在 Card 内部的弹层将会自动使用 Card 的 parentNode 作为容器，可参考下方容器测试 demo\n\n### 演示\n\n#### 普通使用\n\n```js {\"codepath\": \"card.jsx\"}\n```\n\n#### 自定义顺序等\n\n```js {\"codepath\": \"custom.jsx\"}\n```\n\n#### 拆分展示\n\n```js {\"codepath\": \"single.jsx\"}\n```\n\n#### popupContainer - 容器测试\n\n```js {\"codepath\": \"popupContainer.jsx\"}\n```\n"
        }
    },
    "Calendar": {
        "Calendar": {
            "path": "Calendar/Calendar.md",
            "name": "Calendar",
            "info": "### 说明\n\n-   这是 日历 组件\n-   需要自行导入 moment 语言包、设置时区\n\n### 演示\n\n#### 普通使用\n\n```js {\"codepath\": \"base.jsx\"}\n```\n\n#### value / defaultValue - 选中的时间 （受控 / 非受控）\n\n```js {\"codepath\": \"controlled.jsx\"}\n```\n\n#### rules - 自定义规则\n\n```js {\"codepath\": \"rules.jsx\"}\n```\n"
        }
    },
    "Button": {
        "Button": {
            "path": "Button/Button.md",
            "name": "Button",
            "info": "### 说明\n\n-   这是 Button，按钮组件\n-   主要内置了一些样式\n\n### 演示\n\n#### 演示\n\n```js {\"codepath\": \"button.jsx\", \"props\": {\"className\": \"editor_transparent\"}}\n```\n\n#### styleType - 样式风格\n\n```js {\"codepath\": \"styleType.jsx\"}\n```\n\n#### shape - 形状\n\n```js {\"codepath\": \"shape.jsx\"}\n```\n\n#### loading - 加载\n\n```js {\"codepath\": \"loading.jsx\"}\n```\n\n#### size - 尺寸\n\n```js {\"codepath\": \"size.jsx\"}\n```\n\n#### disabled - 禁用\n\n```js {\"codepath\": \"disabled.jsx\"}\n```\n\n#### fakeDisabled - 特殊禁用（仅禁用 onClick）\n\n```js {\"codepath\": \"fakeDisabled.jsx\"}\n```\n\n#### icon - 图标\n\n```js {\"codepath\": \"icon.jsx\"}\n```\n"
        }
    },
    "Breadcrumb": {
        "BackButton": {
            "path": "Breadcrumb/BackButton.md",
            "name": "BackButton",
            "info": "### 说明\n\n面包屑后退按钮组件，配合面包屑使用\n\n### 演示\n\n#### 演示\n\n```js {\"codepath\": \"backbutton.jsx\"}\n```\n"
        },
        "Breadcrumb": {
            "path": "Breadcrumb/Breadcrumb.md",
            "name": "Breadcrumb",
            "info": "### 说明\n\n面包屑组件，配合子组件 Item 使用\n\n### 演示\n\n#### 演示\n\n```js {\"codepath\": \"breadcrumb.jsx\"}\n```\n\n#### separator - 分隔符\n\n```js {\"codepath\": \"breadcrumb-separator.jsx\"}\n```\n\n#### styleType - 样式风格\n\n```js {\"codepath\": \"breadcrumb-styleType.jsx\"}\n```\n"
        },
        "Item": {
            "path": "Breadcrumb/Item.md",
            "name": "Item",
            "info": "### 说明\n\n-   面包屑项组件\n-   传入 href 时为 a 标签，其它情况下为 span 标签，可使用 href 或 onClick 执行跳转，或用于包裹其它元素（Link 等）\n\n### 演示\n\n#### 演示\n\n```js {\"codepath\": \"item.jsx\"}\n```\n\n#### current - 当前项\n\n```js {\"codepath\": \"item-current.jsx\"}\n```\n\n#### noAction - 无操作\n\n```js {\"codepath\": \"item-noAction.jsx\"}\n```\n\n#### disabled - 禁用\n\n```js {\"codepath\": \"item-disabled.jsx\"}\n```\n"
        }
    },
    "Box": {
        "Box": {
            "path": "Box/Box.md",
            "name": "Box",
            "info": "### 说明\n\n-   这是 Box 组件，主要为了解决前端布局问题和样式问题\n-   封装了兼容性支持程度下的一些 flex 属性\n\n### 演示\n\n#### spacing - 子元素间距\n\n```js {\"codepath\": \"spacing.jsx\"}\n```\n\n#### direction - 方向\n\n```js {\"codepath\": \"direction.jsx\"}\n```\n\n#### wrap - 容器定义\n\n```js {\"codepath\": \"wrap.jsx\"}\n```\n\n#### alignItems\n\n```js {\"codepath\": \"alignItems.jsx\"}\n```\n\n#### alignContent\n\n```js {\"codepath\": \"alignContent.jsx\"}\n```\n\n#### justifyContent\n\n```js {\"codepath\": \"justifyContent.jsx\"}\n```\n\n#### padding\n\n```js {\"codepath\": \"padding.jsx\"}\n```\n\n#### span - 栅格排版\n\n```js {\"codepath\": \"span.jsx\"}\n```\n\n#### order - 排序\n\n```js {\"codepath\": \"order.jsx\"}\n```\n\n#### flex\n\n```js {\"codepath\": \"flex.jsx\"}\n```\n\n#### 案例 - 水平垂直居中\n\n```js {\"codepath\": \"center.jsx\"}\n```\n\n#### 案例 - 模拟浮动布局\n\n```js {\"codepath\": \"float.jsx\"}\n```\n\n#### 案例 - 卡片布局\n\n```js {\"codepath\": \"card.jsx\"}\n```\n\n#### 案例 - 滚动\n\n```js {\"codepath\": \"scroll.jsx\"}\n```\n\n#### 常见使用场景\n\n```js {\"codepath\": \"usage.jsx\"}\n```\n"
        }
    },
    "Badge": {
        "Badge": {
            "path": "Badge/Badge.md",
            "name": "Badge",
            "info": "### 说明\n\n-   这是 Badge 组件，用作角标展示\n-   支持点状角标\n-   预设部分颜色和角标位置\n-   不传 children 时会将角标单独展示，可用来作标记\n-   角标的 zIndex 默认为 9，无 children 时无 zIndex\n\n### 演示\n\n#### 演示\n\n```js {\"codepath\": \"badge.jsx\"}\n```\n\n#### placement - 位置\n\n```js {\"codepath\": \"placement.jsx\"}\n```\n\n#### dot - 显示为点\n\n```js {\"codepath\": \"dot.jsx\"}\n```\n\n#### hideWhenZero - 为 0 时自动隐藏\n\n```js {\"codepath\": \"hideWhenZero.jsx\"}\n```\n\n#### maxValue - 最大值\n\n```js {\"codepath\": \"maxValue.jsx\"}\n```\n\n#### value - 自定义内容\n\n```js {\"codepath\": \"value.jsx\"}\n```\n\n#### color - 预设颜色\n\n```js {\"codepath\": \"color.jsx\"}\n```\n\n#### badgeStyle - 自定义样式\n\n```js {\"codepath\": \"badgeStyle.jsx\"}\n```\n\n#### 无内容时展示\n\n```js {\"codepath\": \"noneContent.jsx\"}\n```\n\n#### 案例展示\n\n```js {\"codepath\": \"demo.jsx\"}\n```\n"
        },
        "Bubble": {
            "path": "Badge/Bubble.md",
            "name": "Bubble",
            "info": "### 说明\n\n-   这是 Bubble 组件，特殊的角标样式提示\n\n### 演示\n\n#### 演示\n\n```js {\"codepath\": \"bubble.jsx\"}\n```\n"
        }
    },
    "AutoComplete": {
        "AutoComplete": {
            "path": "AutoComplete/AutoComplete.md",
            "name": "AutoComplete",
            "info": "### 说明\n\n-   AutoComplete 能够尝试猜测⽤户输⼊的⽂字，并且动态的搜索出适配的结果并推荐给⽤户，辅助完成输⼊。⽬的是避免⽤户出错，起到提示作⽤，智能预测⽤户⼼理期望，从⽽确保他们的输⼊更有效率。\n-   默认的弹出层容器为 forwardPopupContainer={triggerNode => triggerNode.parentNode}，默认会查找上层的建议容器\n\n### 数据结构\n\n#### Item\n\n```ts {\"static\": true}\ninterface Item {\n    // 项的值\n    value: string;\n    // 项的展示，为空时展示 value\n    label?: ReactNode;\n}\n```\n\n### 演示\n\n#### 普通使用\n\n```js {\"codepath\": \"autoComplete.jsx\"}\n```\n\n#### disabled - 禁用\n\n```js {\"codepath\": \"disabled.jsx\"}\n```\n\n#### options - 选项展示\n\n```js {\"codepath\": \"options.jsx\"}\n```\n\n#### handleSearch - 自定义搜索\n\n```js {\"codepath\": \"handleSearch.jsx\"}\n```\n\n#### controlled - 受控\n\n```js {\"codepath\": \"controlled.jsx\"}\n```\n\n#### 动态加载数据\n\n```js {\"codepath\": \"loading.jsx\"}\n```\n\n#### 如何实现输入为空时隐藏选项\n\n```js {\"codepath\": \"hideOptionsWhenEmpty.jsx\"}\n```\n\n#### 输入建议\n\n```js {\"codepath\": \"suggest.jsx\"}\n```\n\n#### popupContainer - 容器测试\n\n```js {\"codepath\": \"popupContainer.jsx\"}\n```\n\n#### 边界测试\n\n```js {\"codepath\": \"boundary.jsx\"}\n```\n"
        }
    },
    "ActionList": {
        "ActionList": {
            "path": "ActionList/ActionList.md",
            "name": "ActionList",
            "info": "### 说明\n\n-   这是 ActionList 操作列表组件\n-   外部的操作继承按钮的属性，支持配置按钮的 props，如 disabled、styleType 等，额外增加 tooltip 支持（使用时会默认开启按钮的 fakeDisabled），展开的操作支持 Menu.Item 的 props，disabled、tooltip 等\n-   默认的弹出层容器为 forwardPopupContainer={triggerNode => triggerNode.parentNode}，默认会查找上层的建议容器\n\n### 演示\n\n#### 演示\n\n```js {\"codepath\": \"actionList.jsx\"}\n```\n\n#### size - 尺寸\n\n```js {\"codepath\": \"size.jsx\"}\n```\n\n#### exposeCount - 展示数量\n\n```js {\"codepath\": \"exposeCount.jsx\"}\n```\n\n#### smart - 菜单中只剩下一个操作时自动显示\n\n```js {\"codepath\": \"smart.jsx\"}\n```\n\n#### actionChildren - 子菜单\n\n```js {\"codepath\": \"actionChildren.jsx\"}\n```\n\n#### popoverProps - 弹出层 props\n\n```js {\"codepath\": \"popoverProps.jsx\"}\n```\n\n#### dropdownButton - 自定义展开按钮\n\n```js {\"codepath\": \"dropdownButton.jsx\"}\n```\n\n#### item.tooltip - 内容提示\n\n```js {\"codepath\": \"tooltip.jsx\"}\n```\n"
        }
    }
}
